# Test file

#Parse(strings/ParseJson) OUT -> IN SplitArray(objects/SplitArray)
#SplitArray() OUT -> IN DisconnectAfterPacket(core/DisconnectAfterPacket) OUT -> IN Wrapper(teaser/ScoreStepWrapper)
#Wrapper() OUT -> IN Console(core/Output)

#### Score By Title
# ParseTitle(strings/ParseJson) OUT -> IN SplitArrayTitle(objects/SplitArray)
# SplitArrayTitle() OUT -> TITLE ScoreByTitle(teaser/ScoreByTitle)
# Wrapper() SENTENCE -> IN ScoreByTitle()
# ScoreByTitle() OUT -> SCORE Wrapper()
# '["title", "BUILT", "GOOGLE", "test"]' -> IN ParseTitle(strings/ParseJson)

#### ScoreByLength
# Wrapper() SENTENCE -> IN RelevanceByLength(teaser/ScoreByLength)
# RelevanceByLength() OUT -> SCORE Wrapper()

#### ScoreByPosition
# '10' -> LENGTH ScoreByPosition(teaser/ScoreByPosition)
# Wrapper() POSITION -> POSITION ScoreByPosition()
# ScoreByPosition() OUT -> SCORE Wrapper()


#### Score By Keywords
# ParseKey(strings/ParseJson) OUT -> KEYWORDS ScoreByKeywords(teaser/ScoreByKeywords)
# WrapperKey(teaser/ScoreStepWrapper) SENTENCE -> IN ScoreByKeywords()
# ScoreByKeywords() OUT -> SCORE WrapperKey()
# '[{"word": "GOOGLE", "sum": 1.1}, {"word": "BUILT", "sum": 1.3}]' -> IN ParseKey()

#Console() OUT -> IN WrapperKey() OUT -> IN Con(core/Output)

#'[{"sentence": ["a", "GOOGLE", "BUILT", "by", "whitespace"], "score": 0, "position": 10 }]' -> IN Parse()
#'[{"sentence": ["seconde", "GOOGLE", "no", "match"], "score": 0, "position": 10 }]' -> IN Parse()

#'[{"sentence": ["a", "GOOGLE", "BUILT", "by", "whitespace"], "score": 0, "position": 1 }, {"sentence": ["seconde", "GOOGLE", "no", "match"], "score": 0, "position": 2 }]' -> IN Parse()


LoadBadwords(teaser/LoadBadwords) OUT -> IN C(core/Output)
'GO' -> READY LoadBadwords()