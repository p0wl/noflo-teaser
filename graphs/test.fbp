# Test file

#### Score By Title
# ParseTitle(strings/ParseJson) OUT -> IN SplitArray(objects/SplitArray)
# SplitArray() OUT -> TITLE ScoreByTitle(teaser/ScoreByTitle)
# Parse(strings/ParseJson) OUT -> SENTENCE ScoreByTitle()
# ScoreByTitle() OUT -> IN Console(core/Output)
#'["title", "BUILT", "GOOGLE"]' -> IN ParseTitle(strings/ParseJson)


#### Score By Position
# '10' -> LENGTH ScoreByPosition(teaser/ScoreByPosition)
# Parse(strings/ParseJson) OUT -> SENTENCE ScoreByPosition()
# ScoreByPosition() OUT -> IN Console(core/Output)

#### Score By Length
# Parse(strings/ParseJson) OUT -> SENTENCE ScoreByLength(teaser/ScoreByLength)
# ScoreByLength() OUT -> IN Console(core/Output)


#### ScoreByLength with ScoreStep

Parse(strings/ParseJson) OUT -> IN ScoreStep(teaser/ScoreStep)
ScoreStep() SENTENCE -> IN RelevanceByLength(teaser/RelevanceByLength)
RelevanceByLength() OUT -> SCORE ScoreStep() OUT -> IN Console(core/Output)

'{"sentence": ["a", "GOOGLE", "BUILT", "by", "whitespace"], "score": 0, "position": 10 }' -> IN Parse()

### ABSTRACT WRAP / UNWRAP -> use in every score method